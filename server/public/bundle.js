/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./server/public/app.js":
/*!******************************!*\
  !*** ./server/public/app.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nconst socket = io('ws://localhost:3500') // Use https://practilang.onrender.com to launch outside local\r\n\r\n//Watching typing activity\r\nconst msgInput = document.querySelector('#message')\r\n\r\n//Watching chatname and target/native language \r\nconst nameInput = document.querySelector('#name')\r\nconst nativeLang = document.querySelector('#dropdownMenuButton1')\r\nconst targetLang = document.querySelector('#dropdownMenuButton2')\r\n\r\n// AI suggestions and similarity\r\nconst aiSuggestion = document.querySelector('.AIsuggest')\r\nconst similarity = document.querySelector('.similar')\r\nconst activity = document.querySelector('.activity')\r\nconst instruct = document.querySelector('.Instructions')\r\n\r\n//Chat Display\r\nconst chatDisplay = document.querySelector('.chat-display')\r\nconst waitingDisplay = document.querySelector('.waiting-display')\r\n\r\n// Sending a message\r\nfunction sendMessage(e) {\r\n    e.preventDefault()\r\n    if (nameInput.value && msgInput.value) {\r\n        socket.emit('message', {\r\n            name: nameInput.value,\r\n            text: msgInput.value\r\n        })\r\n        msgInput.value = \"\"\r\n    }\r\n    msgInput.focus()\r\n}\r\n\r\n//Dropdown menu update\r\nwindow.updatenativedown = function(element){\r\n    document.getElementById(\"dropdownMenuButton1\").textContent = element.textContent;\r\n}\r\n\r\nwindow.updatetargetdown = function(element){\r\n    document.getElementById(\"dropdownMenuButton2\").textContent = element.textContent;\r\n}\r\n\r\n//Entering correct chatroom\r\nfunction enterRoom(e){\r\n    e.preventDefault()\r\n    if (nameInput.value && nativeLang.textContent !== 'Native Langauge' && targetLang.textContent !== 'Target Language'){\r\n        socket.emit('enterRoom', {\r\n            name: nameInput.value,\r\n            nativeLanguage: nativeLang.textContent,\r\n            targetLanguage: targetLang.textContent\r\n        })\r\n\r\n        // Waiting screen\r\n        showWaitingUi()\r\n    } else{\r\n        alert('Please enter a name and make a selection from both languages')\r\n    }\r\n}\r\n\r\n// Submits form by applying the message function when submit button is clicked\r\ndocument.querySelector('.form-msg button').addEventListener('click',sendMessage);\r\n\r\n// Joining a room\r\ndocument.querySelector('.form-join').addEventListener('submit', (e) => {\r\n    if (nativeLang.value === 'Native Langauge' && targetLang.value === 'Target Language'){\r\n        e.preventDefault()\r\n        alert('Please select and native and target language')\r\n    } else{\r\n        enterRoom(e)\r\n    }\r\n})\r\n\r\n// Translation when enter is pressed\r\nmsgInput.addEventListener('keydown', (e) => {\r\n    if (e.key === 'Enter'){\r\n        e.preventDefault();\r\n        aiSuggest();\r\n    }else{\r\n        // Sending user name who's typing (activity)\r\n        socket.emit('activity',nameInput.value)\r\n    }\r\n});\r\n\r\n// Listening for waiting UI\r\nsocket.on('waitingForMatch', (data) => {\r\n    showWaitingUi()\r\n})\r\n\r\n\r\n// Listen for messages\r\nsocket.on('message', (data) => {\r\n    activity.textContent = \"\"\r\n    const { name, text, time } = data\r\n    const li =  document.createElement('li')\r\n\r\n    li.classList.add('post')\r\n    if (name === nameInput.value){\r\n        li.classList.add('post--right')\r\n    }else if (name !== 'Admin'){\r\n        li.classList.add('post--left')\r\n    }\r\n\r\n    // If message from Admin, hide waiting UI\r\n    if (data.name == 'Admin' && data.text.includes('joined')){\r\n        hideWaitingUi()\r\n    }\r\n\r\n    //Creating the message in chat from users, with name time as a header\r\n    if (name !== 'Admin') {\r\n        li.innerHTML = `<div class=\"post__header ${name === nameInput.value ? 'post__header--user' : 'post__header--reply'}\">\r\n        <span class=\"post__header--name\">${name}</span><span class=\"post__header--time\">${time}</span></div><div class=\"post__text\">${text}</div>`\r\n    } else {\r\n        li.innerHTML = `<div class=\"post__text\">${text}</div>`\r\n    }\r\n    document.querySelector('.chat-display').appendChild(li)\r\n    // Scrolling through messages\r\n    chatDisplay.scrollTop = chatDisplay.scrollHeight\r\n})\r\n\r\n\r\n\r\n// Timer for typing message\r\nlet activityTimer\r\nsocket.on(\"activity\", (name) => {\r\n    activity.textContent = `${name} is typing...`\r\n\r\n    // Clear after 1 second\r\n    clearTimeout(activityTimer)\r\n    activityTimer = setTimeout(() => {\r\n        activity.textContent = \"\"\r\n    }, 1000)\r\n})\r\n\r\n// Waiting for matches UI loading\r\nfunction showWaitingUi(){\r\n    chatDisplay.style.display ='none'\r\n\r\n    waitingDisplay.style.display ='block'\r\n    waitingDisplay.innerHTML =` <div class=\"waiting-message\"><h3>Waiting for a langauge partner...</h3><p>Looking for someone who speaks <strong>${targetLang.textContent}</strong> and wants to learn <strong>${nativeLang.textContent}</strong></p> <div class =\"spinner\"></div></div>`\r\n    instruct.textContent = \"\"\r\n}\r\n\r\n// Removing waiting screen\r\nfunction hideWaitingUi(){\r\n    waitingDisplay.style.display ='none'\r\n    chatDisplay.style.display ='block'\r\n    instruct.textContent = 'Press \"Enter\" for suggestions and practical similarity';\r\n}\r\n\r\n//Where updating the suggestion and similarity happens...\r\n\r\n\r\n// Translating message\r\nasync function aiSuggest(){\r\n    if(msgInput.value){\r\n        cleartranslations();\r\n        showLoading();\r\n        try{\r\n            // Call API and show suggestion (will change to new API)\r\n            const suggestion = await fetchTranslation(msgInput.value);\r\n            displaySuggestion(suggestion);\r\n            showSimilar(suggestion) \r\n        } catch (error){\r\n            // Display error if no suggestion\r\n            displayError();\r\n        }\r\n    }\r\n}\r\n\r\nfunction cleartranslations(){\r\n    aiSuggestion.innerHTML = \"\";\r\n    similarity.innerHTML =\"\";\r\n\r\n}\r\n\r\n//Loading translation feedback\r\nfunction showLoading(){\r\n    const loadingText = document.createElement('div');\r\n    loadingText.className = 'loading-translation';\r\n    loadingText.textContent = 'Finding a better suggestion...';\r\n    aiSuggestion.appendChild(loadingText);\r\n}\r\n\r\n// Display suggestion\r\nfunction displaySuggestion(translatedText){\r\n    //Remove loading\r\n    const load = aiSuggestion.querySelector('.loading-translation')\r\n    if (load){\r\n        aiSuggestion.removeChild(load);\r\n    }\r\n    \r\n    if (translatedText){\r\n        aiSuggestion.innerHTML = `<em>A more practical way you could say this:</em>`;\r\n        \r\n        const suggestionDiv = document.createElement('div');\r\n        suggestionDiv.className = 'translation';\r\n        suggestionDiv.textContent = translatedText;\r\n\r\n        // Makes suggestion a clickable element to be copy and pasted to message field\r\n        suggestionDiv.style.cursor = 'pointer';\r\n\r\n        suggestionDiv.onclick = function () {\r\n            document.getElementById('message').value = translatedText;\r\n            document.getElementById('message').focus();\r\n            console.log(\"Copied :\", translatedText);\r\n        };\r\n        aiSuggestion.appendChild(suggestionDiv);\r\n        \r\n        // Start the process for similarity comparison translation\r\n        showSimilar(translatedText)\r\n    }else{\r\n        displayError();\r\n    }\r\n}\r\n\r\n//Display Translation Error\r\nfunction displayError(){\r\n    //Remove loading\r\n    const load = aiSuggestion.querySelector('.loading-translation')\r\n    if (load){\r\n        aiSuggestion.removeChild(load);\r\n    }\r\n\r\n    const errorDiv = document.createElement('div');\r\n    errorDiv.className = 'error';\r\n    errorDiv.textContent = 'Suggestion failed. Please try again.';\r\n    aiSuggestion.appendChild(errorDiv);\r\n}\r\n\r\n// Showing similarity of translated texted\r\nasync function showSimilar(translatedText){\r\n    if(translatedText){\r\n\r\n        similarity.innerHTML = \"\";\r\n        \r\n        //Feedback\r\n        const loadingText = document.createElement('div');\r\n        loadingText.className = 'loading-similarity';\r\n        loadingText.textContent = 'Finding similarity...';\r\n        similarity.appendChild(loadingText);\r\n\r\n        try{\r\n            // Call API and show similarity (will change to new API)\r\n            const post_similar = await fetchsimilarity(translatedText);\r\n            displaySimilar(post_similar);\r\n        } catch (error){\r\n            // Display error if no suggestion\r\n            displayError();\r\n        }\r\n    }\r\n}\r\n\r\n// Display similarity\r\nfunction displaySimilar(similarText){\r\n    //Remove loading\r\n    const load = similarity.querySelector('.loading-similarity');\r\n    if (load){\r\n        similarity.removeChild(load);\r\n    }\r\n    \r\n    if (similarText){\r\n        similarity.innerHTML = `<em>Which is similar to: </em>`\r\n        const similarityDiv = document.createElement('div');\r\n        similarityDiv.className = 'sim-translation';\r\n        similarityDiv.textContent = similarText;\r\n\r\n        similarity.appendChild(similarityDiv);\r\n    }else{\r\n        displayError();\r\n    }\r\n}\r\n\r\n\r\n// The API Structures\r\n\r\n// DEEPSEEK API\r\n\r\nconst suggestionPrompt = \"You are a helpful assistant that recieves a message and returns a more practial and culturally appropriate way of saying the given message in the same langauge it was presented to you. Only return the suggestion you deem to be the most practical without explanation or additional context\"\r\n\r\nconst similarityPrompt =\"Given a message in {output_language}, provide a contextually and culturally similar alternative phrasing of this message translated in {input_language}. Only return the translation you deem to be the most similar without explanation\"\r\n\r\n\r\n// const apiKey = process.env.DEEPSEEK_API_KEY\r\nasync function fetchTranslation(text) {\r\n    try{\r\n        \r\n        const response = await fetch('https://api.deepseek.com/v1/chat/completions',{\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${apiKey}`\r\n        },\r\n        body: JSON.stringify({\r\n            model: \"deepseek-chat\",\r\n            messages: [\r\n                {\r\n                    role: \"system\",\r\n                    content: suggestionPrompt.replace(\"{output_language}\", targetLang.textContent)},\r\n                    {\r\n                        role: \"user\",\r\n                        content: text\r\n                    }\r\n            ],\r\n            temperature: 0.3\r\n        })\r\n    });\r\n    const data = await response.json();\r\n    return data.choices[0].message.content;\r\n    } catch (error) {\r\n        console.error(\"Translation error: \",error);\r\n        return null\r\n    }\r\n}\r\n    \r\nasync function fetchsimilarity(translatedText) {\r\n    console.log(\"Avaliable vars:\", /* unsupported import.meta.env */ undefined);\r\n    try{\r\n        const response = await fetch('https://api.deepseek.com/v1/chat/completions',{\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${apiKey}`\r\n        },\r\n        body: JSON.stringify({\r\n            model: \"deepseek-chat\",\r\n            messages: [\r\n                {\r\n                    role: \"system\",\r\n                    content: similarityPrompt.replace(\"{input_language}\", nativeLang.textContent).replace(\"{output_language}\", targetLang.textContent)},\r\n                    {\r\n                        role: \"user\",\r\n                        content: translatedText\r\n                    }\r\n            ],\r\n            temperature: 0.3\r\n        })\r\n    });\r\n    const data = await response.json();\r\n    return data.choices[0].message.content;\r\n    } catch (error) {\r\n        console.error(\"Similarity error: \",error);\r\n        return null\r\n    }\r\n}\n\n//# sourceURL=webpack:///./server/public/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./server/public/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;